// src/lib/validations/rotation.ts - VERSION COMPLÃˆTE AVEC PRIX D'ACHAT
import { z } from 'zod';

// Schema pour crÃ©ation/mise Ã  jour d'une rotation AVEC prix
export const ProductRotationSchema = z.object({
  ean13: z.string()
    .min(8, 'EAN13 trop court')
    .max(20, 'EAN13 trop long')
    .regex(/^[0-9]+$/, 'EAN13 doit contenir uniquement des chiffres')
    .transform(val => val.trim()),
  
  rotationMensuelle: z.number()
    .min(0, 'Rotation doit Ãªtre positive')
    .max(1000, 'Rotation trop Ã©levÃ©e (max 1000)')
    .transform(val => Math.round(val * 100) / 100), // Arrondir Ã  2 dÃ©cimales
    
  // ðŸ†• NOUVEAU : Prix d'achat optionnel
  prixAchatUnitaire: z.number()
    .min(0, 'Prix d\'achat doit Ãªtre positif')
    .max(9999.99, 'Prix d\'achat trop Ã©levÃ© (max 9999.99â‚¬)')
    .transform(val => Math.round(val * 100) / 100) // Arrondir Ã  2 dÃ©cimales
    .optional()
});

// ðŸ†• Schema pour import CSV avec prix (tous les champs requis dans CSV)
export const RotationImportWithPriceSchema = z.object({
  ean13: z.string().min(8).max(20),
  rotationMensuelle: z.number().min(0).max(1000),
  prixAchatUnitaire: z.number().min(0).max(9999.99)
});

// ðŸ†• Schema pour import CSV SANS prix (rÃ©tro-compatibilitÃ©)
export const RotationImportLegacySchema = z.object({
  ean13: z.string().min(8).max(20),
  rotationMensuelle: z.number().min(0).max(1000)
});

// ðŸ†• Union des deux formats pour flexibilitÃ©
export const RotationImportUnionSchema = z.union([
  RotationImportWithPriceSchema,
  RotationImportLegacySchema
]);

// Schema pour import CSV (mis Ã  jour pour supporter les deux formats)
export const RotationImportSchema = z.object({
  data: z.array(RotationImportUnionSchema)
    .min(1, 'Au moins une rotation doit Ãªtre fournie')
    .max(10000, 'Maximum 10000 rotations par import')
});

// Schema pour filtres des rotations (Ã©tendu avec prix)
export const RotationFiltersSchema = z.object({
  search: z.string().optional().default(''),
  rotationMin: z.string().optional().default(''),
  rotationMax: z.string().optional().default(''),
  dateMAJFrom: z.string().optional().default(''),
  dateMAJTo: z.string().optional().default(''),
  // ðŸ†• Filtres prix
  prixMin: z.string().optional().default(''),
  prixMax: z.string().optional().default(''),
  avecPrix: z.boolean().optional().default(false), // Filtrer seulement les produits avec prix
  limit: z.number().min(1).max(1000).optional().default(100),
  offset: z.number().min(0).optional().default(0)
});

// Schema pour recalcul d'urgence
export const RecalculateUrgencySchema = z.object({
  signalementIds: z.array(z.string().cuid()).optional(),
  all: z.boolean().optional().default(false)
}).refine(
  data => data.signalementIds?.length || data.all,
  'Soit signalementIds soit all doit Ãªtre fourni'
);

// Types dÃ©rivÃ©s
export type ProductRotationInput = z.infer<typeof ProductRotationSchema>;
export type RotationImportInput = z.infer<typeof RotationImportSchema>;
export type RotationFiltersInput = z.infer<typeof RotationFiltersSchema>;
export type RecalculateUrgencyInput = z.infer<typeof RecalculateUrgencySchema>;

// ðŸ†• Nouveaux types pour l'import avec prix
export type RotationImportWithPrice = z.infer<typeof RotationImportWithPriceSchema>;
export type RotationImportLegacy = z.infer<typeof RotationImportLegacySchema>;
export type RotationImportData = z.infer<typeof RotationImportUnionSchema>;